// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 3 relationships 
//1) one to many --> 1 user can have multiple posts 
//2) multiple users can use multiple tags i.e reactjs tag can be usd my multiple user. and single user can have multiple tag. 
// 3) 1 on 1 relation --> 1 user can have only 1 preference
model User {
  id             String          @id @default(uuid())
  name           String
  age            Int
  email          String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  writtenPosts   Post[]          @relation("writtenPosts")
  favouritePosts Post[]          @relation("favouritePosts")
  UserPreference UserPreference?
  role           Role            @default(BASIC)

  @@unique([name, email]) // block-level-attribute-validations
  @@index([email])
}

enum Role {
  BASIC
  isAdmin
}

model UserPreference {
  id          String  @id @default(uuid())
  emailUpdate Boolean
  User        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
}

model Post {
  id        String   @id @default(uuid())
  title     String
  avgRating Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("writtenPosts", fields: [authorId], references: [id])
  authorId  String
  favBy     User?    @relation("favouritePosts", fields: [favById], references: [id])
  favById   String?
}
